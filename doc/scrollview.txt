*scrollview.txt*   Plugin that displays (non-interactive) scrollbars
*nvim-scrollview*

Author: Daniel Steinberg - https://www.dannyadam.com
Web: https://github.com/dstein64/nvim-scrollview

1. Requirements                            |scrollview-requirements|
2. Installation                            |scrollview-installation|
3. Usage                                   |scrollview-usage|
4. Configuration                           |scrollview-configuration|
5. Issues                                  |scrollview-issues|

|nvim-scrollview| is a plugin that displays (non-interactive) scrollbars.
The plugin is customizable (see |scrollview-configuration|).

============================================================================
1. Requirements                            *scrollview-requirements*

* `nvim>=0.5`

============================================================================
2. Installation                            *scrollview-installation*

Use |packages| or one of the various package managers.

============================================================================
3. Usage                                   *scrollview-usage*

* |nvim-scrollview| works automatically, displaying (non-interactive)
  scrollbars.

                                           *scrollview-commands*
* The *:ScrollViewDisable* command disables scrollbars.
* The *:ScrollViewEnable* command enables scrollbars. This is only necessary
  if scrollbars have previously been disabled.
* The *:ScrollViewRefresh* command refreshes the scrollbars. This is relevant
  when the scrollbars are out-of-sync, which can occur e.g., as a result of
  some window arrangement actions (see |scrollview-issues|).

                                           *scrollview-mappings*
The following |<Plug>| mappings are defined for convenience.

* `<Plug>(ScrollViewDisable)`
* `<Plug>(ScrollViewEnable)`
* `<Plug>(ScrollViewRefresh)`

The following (experimental) |<Plug>| mappings are defined for customizing
mouse functionality (see |scrollview-mouse-customization|).

* `<Plug>(ScrollViewLeftMouse)`
* `<Plug>(ScrollViewMiddleMouse)`
* `<Plug>(ScrollViewRightMouse)`
* `<Plug>(ScrollViewX1Mouse)`
* `<Plug>(ScrollViewX2Mouse)`

============================================================================
4. Configuration                           *scrollview-configuration*

The following variables can be used to customize the behavior of
|nvim-scrollview|. Variables can be set at the 1) window, 2) tab, 3) buffer,
and/or 4) global scope, with that order of precedence (i.e., window variables
have the highest precedence, and global variables have the lowest).

`Variable`                                `Default`
  Description                             Info
-------------                           -------

*scrollview_on_startup*                   `1`
  Specifies whether scrollbars are        Considered only at global scope
  enabled on startup
*scrollview_mode*                         `'simple'`
  Specifies what the scrollbar            See |scrollview-modes| for details on
  position and size correspond to         the available modes
*scrollview_excluded_filetypes*           `[]`
  Optional file types for which
  scrollbars should not be displayed
*scrollview_current_only*                 `0`
  Specifies whether scrollbars should     Considered only at tab and global
  only be displayed in the current        scopes
  window
*scrollview_winblend*                     `50`
  Specifies the level of transparency     An integer between 0 (opaque) and
  for scrollbars                          100 (transparent)
*scrollview_base*                         `'right'`
  Specifies where the scrollbar is        `'left'` or `'right'` for corresponding
  anchored                                window edges, or `'buffer'` for buffer
*scrollview_column*                       `1`
  Specifies the scrollbar column          An integer greater than or equal
  (relative to |scrollview_base|)           to 1
*scrollview_auto_mouse*                   `1`
  Specifies whether a mapping is          Considered only at global scope
  automatically created for mouse
  support (without clobbering)

The variables can be customized in your |init.vim|, as shown in the following
example.
 >
    let g:scrollview_excluded_filetypes = ['nerdtree']
    let g:scrollview_current_only = 1
    let g:scrollview_winblend = 75
    " Position the scrollbar at the 80th character of the buffer
    let g:scrollview_base = 'buffer'
    let g:scrollview_column = 80

Scrollview Modes ~
                                           *scrollview-modes*
The following modes are available for the |scrollview_mode| configuration
setting (set as a |string|). Without closed |folds|, all three modes work the
same way.

Mode       Description
----       -----------
*simple*     The scrollbar top position reflects the window's top line number
           relative to the document's line count. The scrollbar height reflects
           the size of the window relative to the document's line count.

*flexible*   The scrollbar height adapts to reflect the number of lines in the
           window, counting lines in closed folds, relative to the document's
           line count. The scrollbar top position reflects the window's top
           line number relative to the document's line count. The scrollbar
           bottom position reflects the window's bottom line number relative
           to the document's line count.

*virtual*    The scrollbar position and height are calculated similarly to
           the |simple| mode, but line numbers and the document line count
           are implicitly updated to virtual counterparts that account for
           closed folds. The scrollbar top position reflects the window's top
           virtual line number relative to the document's virtual line count.
           The scrollbar height reflects the size of the window relative to
           the document's virtual line count.

Color Customization ~
                                           *scrollview-color-customization*
The following highlight group can be configured to change |nvim-scrollview|'s
colors.

Name         Default   Description
----         -------   -----------
`ScrollView`   `Visual`    Color for the scrollbar

The highlight groups can be customized in your |init.vim|, as shown in the
following example.
 >
    " Link ScrollView highlight to Pmenu highlight
    highlight link ScrollView Pmenu

    " Specify custom highlighting for ScrollView
    highlight ScrollView ctermbg=159 guibg=LightCyan

Mouse Customization (experimental) ~
                                           *scrollview-mouse-customization*
When |scrollview_auto_mouse| is set, a |<LeftMouse>| mapping is automatically
created for interactive mouse support. An existing mapping will not be
clobbered.

Mappings can be used to manually create mappings for mouse support.
 >
    " Add support for dragging scrollbars with the left mouse button
    map  <leftmouse> <plug>(ScrollViewMiddleMouse)
    imap <leftmouse> <plug>(ScrollViewMiddleMouse)

    " Add support for dragging scrollbars with the middle mouse button
    map  <middlemouse> <plug>(ScrollViewMiddleMouse)
    imap <middlemouse> <plug>(ScrollViewMiddleMouse)

    " Add support for dragging scrollbars with the right mouse button
    map  <rightmouse> <plug>(ScrollViewRightMouse)
    imap <rightmouse> <plug>(ScrollViewRightMouse)

    " Add support for dragging scrollbars with the x1 mouse button
    map  <x1mouse> <plug>(ScrollViewX1Mouse)
    imap <x1mouse> <plug>(ScrollViewX1Mouse)

    " Add support for dragging scrollbars with the x2 mouse button
    map  <x2mouse> <plug>(ScrollViewX2Mouse)
    imap <x2mouse> <plug>(ScrollViewX2Mouse)

============================================================================
5. Issues                                  *scrollview-issues*

Synchronization Issues ~
                                           *scrollview-synchronization-issues*
* Scrollbars can become out-of-sync after window arrangement actions that are
  not followed by a scroll event. For example, this can be seen by starting
  `nvim`, issuing |:help|, then typing `<ctrl-w>J` to move the help window to
  the bottom of the screen. This could be resolved if there was an event that
  is triggered by the window arrangement actions. |:ScrollViewRefresh|, or
  scrolling can be used to refresh the scrollbars.
  - Workaround: Remap the problematic key sequences accordingly. >
    nmap <c-w>H <c-w>H<plug>(ScrollViewRefresh)
    nmap <c-w>J <c-w>J<plug>(ScrollViewRefresh)
    nmap <c-w>K <c-w>K<plug>(ScrollViewRefresh)
    nmap <c-w>L <c-w>L<plug>(ScrollViewRefresh)
<    This won't resolve the issue in all cases (e.g., when using |:wincmd|).

* Scrollbars become out-of-sync when the mouse wheel is used to scroll a
  non-current window. This is because the |WinScrolled| event only corresponds
  to the current window. The scrollbars can be refreshed with
  |:ScrollViewRefresh|, scrolling, or by changing the current window.
  - Workaround: Remap the problematic key sequences accordingly. >
    nmap <scrollwheelup> <scrollwheelup><plug>(ScrollViewRefresh)
    nmap <scrollwheeldown> <scrollwheeldown><plug>(ScrollViewRefresh)

* Scrollbars become out-of-sync after fold commands when using a
  |scrollview-mode| that accounts for folds. Because there are no |autocmd-events|
  for folding, the plugin is unable to refresh the scrollbars.
  - Workaround: Remap the problematic fold command key sequences accordingly,
    depending on the fold commands you use. >
    nmap zo zo<plug>(ScrollViewRefresh)
    nmap zc zc<plug>(ScrollViewRefresh)

Error Message Issues ~
                                           *scrollview-error-message-issues*
* When attempting to close the last window in a tab with |:close| or
  `<ctrl-w>c`, with the scrollbar displayed, and at least one other tab, the
  following error is shown: >
    E5601: Cannot close window, only floating window would remain
<  Neovim Issue #11440 is the corresponding issue, opened November 23, 2019.
  - Workaround 1: Use |:quit|, |ZZ|, |ZQ|, or another command that quits the
    current window (as opposed to a window-closing command).
  - Workaround 2: Use |:only| or `<ctrl-w>o` on the last window of the tab,
    which has the side-effect of closing all floating windows (including
    scrollbars). A subsequent window-closing command works without error.
  - Workaround 3: Use |:tabclose|.
  - Workaround 4: Remap the problematic key sequence accordingly. >
    nnoremap <silent> <c-w>c
          \ :silent! ScrollViewDisable<cr>
          \ <c-w>c
          \ :silent! ScrollViewEnable<cr>
<    This won't resolve the issue in all cases (e.g., when using |:close| or
    |:wincmd|). |<Plug>| mappings cannot be used, as they require recursive maps,
    and <c-w>c would infinitely recurse, as its usage on the right-hand-side
    is not at the beginning (see |recursive_mapping| for details).

* Deleting a buffer with |:bdelete|, when it's the only visible buffer and there
  are multiple buffers on the buffer list, results in the following error (with
  duplicate lines, as shown): >
    E444: Cannot close last window
    E444: Cannot close last window
<  The buffer may not be deleted from the buffer list. Neovim Issue #13628 is
  the corresponding issue, opened December 28, 2020.
  - Workaround 1: Use |:only| or `<ctrl-w>o`, which has the side-effect of closing
    all floating windows (including scrollbars). A subsequent |:bdelete| command
    works without error.
  - Workaround 2: Create a `Bdelete` command that avoids the issue. >
    command Bdelete
          \ silent! ScrollViewDisable
          \ | bdelete
          \ | silent! ScrollViewEnable

============================================================================
 vim:tw=78:ts=4:ft=help:norl:
